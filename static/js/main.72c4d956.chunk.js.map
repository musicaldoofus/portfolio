{"version":3,"sources":["components/containers/Main/index.js","components/views/Root/index.js","Routes.js","components/containers/Nav/index.js","Router.js","components/molecules/Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["Main","_ref","children","react_default","a","createElement","Root","containers_Main","className","Routes","react_router","exact","path","component","navLinks","to","label","Nav","map","key","react_router_dom","Router","window","location","href","indexOf","containers_Nav","src_Routes","Footer","id","role","App","_useState","useState","_useState2","Object","slicedToArray","showIntroAnim","setShowIntroAnim","useEffect","setTimeout","src_Router","molecules_Footer","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kOAUeA,EARF,SAAAC,GAAgB,IAAdC,EAAcD,EAAdC,SACX,OACIC,EAAAC,EAAAC,cAAA,YACKH,ICQEI,EAVF,WACT,OACIH,EAAAC,EAAAC,cAACE,EAAD,KACIJ,EAAAC,EAAAC,cAAA,cACIF,EAAAC,EAAAC,cAAA,6CAAoCF,EAAAC,EAAAC,cAAA,QAAMG,UAAU,qBAAhB,YAApC,QAA4FL,EAAAC,EAAAC,cAAA,QAAMG,UAAU,qBAAhB,UAA5F,eCSDC,EAZA,WACd,OACCN,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACCP,EAAAC,EAAAC,cAACK,EAAA,EAAD,CACCC,OAAK,EACLC,KAAK,IACLC,UAAWP,MCPTQ,EAAW,CAChB,CACCC,GAAI,IACJC,MAAO,QAER,CACCD,GAAI,SACJC,MAAO,SAER,CACCD,GAAI,QACJC,MAAO,QAER,CACCD,GAAI,QACJC,MAAO,QAER,CACCD,GAAI,WACJC,MAAO,YAoBMC,EAhBH,WACX,OACCd,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,OAAKG,UAAU,aACdL,EAAAC,EAAAC,cAAA,UACES,EAASI,IAAI,SAAAjB,GAAA,IAAEc,EAAFd,EAAEc,GAAIC,EAANf,EAAMe,MAAN,OACbb,EAAAC,EAAAC,cAAA,MAAIc,IAAKJ,GACRZ,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAML,GAAIA,GAAKC,UCZPK,EAhBA,WAGd,OAFkBC,OAAOC,SAASC,KAAKC,QAAQ,WAAa,EAG3DtB,EAAAC,EAAAC,cAACe,EAAA,EAAD,KACCjB,EAAAC,EAAAC,cAACqB,EAAD,MACAvB,EAAAC,EAAAC,cAACsB,EAAD,OAGDxB,EAAAC,EAAAC,cAACe,EAAA,EAAD,KACCjB,EAAAC,EAAAC,cAACqB,EAAD,MACAvB,EAAAC,EAAAC,cAACsB,EAAD,QCPYC,SANA,kBACdzB,EAAAC,EAAAC,cAAA,UAAQwB,GAAG,SAASC,KAAK,eACxB3B,EAAAC,EAAAC,cAAA,+CC0Ba0B,SA1BH,WAAM,IAAAC,EACyBC,oBAAS,GADlCC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACVK,EADUH,EAAA,GACKI,EADLJ,EAAA,GAajB,OARAK,oBAAU,WAGTjB,OAAOkB,WAAW,WACjBF,GAAiB,IANO,MAQvB,IAGFnC,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACb6B,GACAlC,EAAAC,EAAAC,cAAA,OAAKG,UAAU,wBACdL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,gBAGjBL,EAAAC,EAAAC,cAACoC,EAAD,MACAtC,EAAAC,EAAAC,cAACqC,EAAD,SCdiBC,QACW,cAA7BrB,OAAOC,SAASqB,UAEe,UAA7BtB,OAAOC,SAASqB,UAEhBtB,OAAOC,SAASqB,SAASC,MACvB,2DCXNC,IAASC,OAAO5C,EAAAC,EAAAC,cAAC2C,EAAD,MAAQC,SAASC,eAAe,SD0H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.72c4d956.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Main = ({children}) => {\r\n    return (\r\n        <main>\r\n            {children}\r\n        </main>\r\n    );\r\n}\r\n\r\nexport default Main;","import React from 'react';\r\nimport Main from '../../containers/Main';\r\n\r\nconst Root = () => {\r\n    return (\r\n        <Main>\r\n            <header>\r\n                <h1>Hi there, I'm Michael. I design <span className=\"accent-block blue\">learning</span> for <span className=\"accent-block pink\">humans</span>.</h1>\r\n            </header>\r\n        </Main>\r\n    );\r\n}\r\n\r\nexport default Root;","import React from 'react';\r\nimport Root from './components/views/Root';\r\nimport { Switch, Route } from 'react-router-dom';\r\n\r\nconst Routes = () => {\r\n\treturn (\r\n\t\t<Switch>\r\n\t\t\t<Route\r\n\t\t\t\texact\r\n\t\t\t\tpath=\"/\"\r\n\t\t\t\tcomponent={Root}\r\n\t\t\t/>\r\n\t\t</Switch>\r\n\t);\r\n}\r\n\r\nexport default Routes;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst navLinks = [\r\n\t{\r\n\t\tto: '/',\r\n\t\tlabel: 'Home'\r\n\t},\r\n\t{\r\n\t\tto: '/about',\r\n\t\tlabel: 'About'\r\n\t},\r\n\t{\r\n\t\tto: '/work',\r\n\t\tlabel: 'Work'\r\n\t},\r\n\t{\r\n\t\tto: '/blog',\r\n\t\tlabel: 'Blog'\r\n\t},\r\n\t{\r\n\t\tto: '/contact',\r\n\t\tlabel: 'Contact'\r\n\t}\r\n];\r\n\r\nconst Nav = () => {\r\n\treturn (\r\n\t\t<nav>\r\n\t\t\t<div className=\"nav-links\">\r\n\t\t\t\t<ul>\r\n\t\t\t\t\t{navLinks.map(({to, label}) => (\r\n\t\t\t\t\t\t<li key={to}>\r\n\t\t\t\t\t\t\t<Link to={to}>{label}</Link>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</ul>\r\n\t\t\t</div>\r\n\t\t</nav>\r\n\t);\r\n}\r\n\r\nexport default Nav;","import React from 'react';\r\nimport { BrowserRouter, HashRouter } from 'react-router-dom';\r\nimport Routes from './Routes';\r\nimport Nav from './components/containers/Nav';\r\n\r\nconst Router = () => {\r\n\tconst isGHPages = window.location.href.indexOf('github') > -1;\r\n\t\r\n\treturn isGHPages ? (\r\n\t\t<HashRouter>\r\n\t\t\t<Nav/>\r\n\t\t\t<Routes/>\r\n\t\t</HashRouter>\r\n\t) : (\r\n\t\t<BrowserRouter>\r\n\t\t\t<Nav/>\r\n\t\t\t<Routes/>\r\n\t\t</BrowserRouter>\r\n\t);\r\n}\r\n\r\nexport default Router;","import React from 'react';\r\nimport './Footer.css';\r\n\r\nconst Footer = () => (\r\n\t<footer id=\"footer\" role=\"contentinfo\">\r\n\t\t<span>Copryight 2020 Michael Burns</span>\r\n\t</footer>\r\n);\r\n\r\nexport default Footer;","import React, { useState, useEffect } from 'react';\r\nimport Router from './Router';\r\nimport Footer from './components/molecules/Footer';\r\nimport './App.css';\r\n\r\nconst App = () => {\r\n\tconst [showIntroAnim, setShowIntroAnim] = useState(true);\r\n\r\n\tconst animationDuration = 3000;\r\n\r\n\tuseEffect(() => {\r\n\t\t//window.scrollTo(0, 0);\r\n\r\n\t\twindow.setTimeout(() => {\r\n\t\t\tsetShowIntroAnim(false);\r\n\t\t}, animationDuration);\r\n\t}, []);\r\n\r\n\treturn (\r\n\t\t<div className=\"app\">\r\n\t\t\t{showIntroAnim && (\r\n\t\t\t\t<div className=\"intro-line-container\">\r\n\t\t\t\t\t<div className=\"intro-line\"></div>\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\t\t\t<Router/>\r\n\t\t\t<Footer/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n//import '../node_modules/react-grid-layout/css/styles.css';\r\n//import '../node_modules/react-resizable/css/styles.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));\r\nserviceWorker.unregister();"],"sourceRoot":""}